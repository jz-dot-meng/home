/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface StroopRewardContract
  extends Truffle.Contract<StroopRewardInstance> {
  "new"(
    _token: string,
    meta?: Truffle.TransactionDetails
  ): Promise<StroopRewardInstance>;
}

export interface Deposit {
  name: "Deposit";
  args: {
    user: string;
    amount: BN;
    0: string;
    1: BN;
  };
}

export interface Reset {
  name: "Reset";
  args: {
    user: string;
    0: string;
  };
}

export interface Reward {
  name: "Reward";
  args: {
    user: string;
    originalAmount: BN;
    reward: BN;
    0: string;
    1: BN;
    2: BN;
  };
}

type AllEvents = Deposit | Reset | Reward;

export interface StroopRewardInstance extends Truffle.ContractInstance {
  depositBalance(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  hasDeposit(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  lastPlayedBet(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  lastPlayedSimple(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  simpleDeposit: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  simpleReward: {
    (
      _score: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _score: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _score: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _score: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  betDeposit: {
    (
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  betReward: {
    (
      _score: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _score: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _score: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _score: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  resetDeposit: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  methods: {
    depositBalance(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    hasDeposit(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    lastPlayedBet(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    lastPlayedSimple(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    name(txDetails?: Truffle.TransactionDetails): Promise<string>;

    simpleDeposit: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    simpleReward: {
      (
        _score: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _score: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _score: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _score: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    betDeposit: {
      (
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    betReward: {
      (
        _score: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _score: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _score: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _score: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    resetDeposit: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
